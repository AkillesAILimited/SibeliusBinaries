////////////////////////////////////////////////////////////////////////////////
//
//                                 NOTICE:
//  THIS PROGRAM CONSISTS OF TRADE SECRECTS THAT ARE THE PROPERTY OF
//  Advanced Products Ltd. THE CONTENTS MAY NOT BE USED OR DISCLOSED
//  WITHOUT THE EXPRESS WRITTEN PERMISSION OF THE OWNER.
//
//               COPYRIGHT Advanced Products Ltd 2016-2019
//
////////////////////////////////////////////////////////////////////////////////
package com.cloudpta.quantpipeline.api.demo;

import com.cloudpta.quantpipeline.api.QPAPIServer;
import com.cloudpta.quantpipeline.api.QPExperiment;
import com.cloudpta.quantpipeline.api.QPExperimentRun;
import com.cloudpta.quantpipeline.api.QPIORecord;
import com.cloudpta.quantpipeline.api.QPInput;
import com.cloudpta.quantpipeline.api.QPModel;
import java.math.BigDecimal;
import java.math.MathContext;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Danny
 */
public class QPDemo
{
    public static void main(String[] args)
    {
        // The pricer price
        double bsPrice = 5.6527181548061884;

        /// QP CODE ///
        // set up experiment
        QPAPIServer server = new QPAPIServer("127.0.0.1", 8080);
        String experimentCategory = "demo";
        String experimentName = "pricer";
        QPExperiment experiment = new QPExperiment(server, experimentCategory, experimentName);
        experiment.load();
        
        String dateTime = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_TIME);
        /// QP CODE ///
        // run pricer
        // get the name
        String runName = "gershwin " + dateTime;
        System.out.println("running " + runName);
        // Create the model class
        QPModel modelToRun = new QPGershwinModel(bsPrice);            
        // reading the last message that was sent so 1 backwards
        // create the run
        // do within a try with resources
        try(QPExperimentRun run = experiment.newRun(runName, modelToRun, false, 1))
        {
            run.doRun();
        }
        // Next do buggy run
        runName = "buggy " + dateTime;
        System.out.println("running " + runName);
        // Create the model instance
        modelToRun = new QPBuggyModel();
        // reading the last message that was sent so 1 backwards
        // create the run
        try(QPExperimentRun run = experiment.newRun(runName, modelToRun, false, 1))
        {
            run.doRun();
        }
    }        
}

class QPBuggyModel extends QPModel
{

    @Override
    public void run() throws Exception
    {
        // show throw an exception
        double x = 1/0;
    }    
}

class QPGershwinModel extends QPModel
{
    public QPGershwinModel(double targetPrice)
    {
        this.targetPrice = new BigDecimal(targetPrice);
    }
    
    @Override
    public void run() throws Exception
    {       
        // start timer
        Instant start = Instant.now();
        
        // read data in from 1 back
        QPInput input = run.getInput();
        QPIORecord inputMessage = input.read(10);
        String inputMessageString = inputMessage.value;

        // do the pricing
        String gershwinPriceRequestString = QPDemoHelper.processData(inputMessageString);
        double gershwinPrice = QPDemoHelper.getPrice(gershwinPriceRequestString);
        Instant end  = Instant.now();
        BigDecimal endEpochMilli = new BigDecimal(end.toEpochMilli());
        BigDecimal startEpochMilli = new BigDecimal(start.toEpochMilli());
        String timeTaken = endEpochMilli.subtract(startEpochMilli).divide(new BigDecimal(1000)).toPlainString();
        
        // set parameters
        run.setParamaterValue("demo/pricer", "gershwin");
        run.setParamaterValue("demo/steps", "0");

        // set metrics
        BigDecimal pricingError = new BigDecimal(gershwinPrice).subtract(targetPrice).abs().round(MathContext.DECIMAL32);
        String pricingErrorAsString = pricingError.toPlainString();
        run.setMetricValue("demo/pricing_error", pricingErrorAsString);
        run.setMetricValue("demo/time_taken", timeTaken);

        // write out data
        QPDemoHelper.writeOutData(run.getName(), "gershiwn", gershwinPrice, Double.parseDouble(timeTaken), 0);

    }
    
    BigDecimal targetPrice;
}
